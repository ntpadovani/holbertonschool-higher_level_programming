Test cases for 0-add_integer.py

This library has a function that adds two integers, Tha values
provided must be only integers of float, otherwise, TypeError 
will be split with error messages.

    >>> add_integer = __import__('0-add_integer').add_integer

Documentation

Here we verify if our modules and funtions are documented.
We use __doc__ to verify module's and function's Documentation
Test Cases


``add_integer`` will take two arguments that must be int or float then return the addition
here we will address all possible test cases so that the function works properly.
b equals 98 as the given number.

Using the given b number(98)

    >>> add_integer(10)
    108
    >>> add_integer(-5)
    93

Testing the given additions
-------------------------

    >>> add_integer(1, 2)
    3

    >>> add_integer(100, -2)
    98

Testing both negative numbers
-----------------------------

    >>> add_integer(-5, -5)
    -10

Float arguments
===============
``add_integer`` should convert flaots to integers before make the addition

Testing float numbers
---------------------

    >>> add_integer(5.2, 15.6)
    20

    >>> add_integer(7, 20.8)
    27

    
Testing None as arguments
=================================

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

Testing float overflow and NaN (not a number)
---------------------------------------------

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('Nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

Testing arguments- 0,one and more
=================================

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> add_integer(23)
    121

    >>> add_integer(3, 4, 13)
    Traceback (most recent call last):
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

    >>> add_integer(,)
    Traceback (most recent call last):
    SyntaxError: invalid syntax

TypeError
=========
Here we check TypeErrors strings

  >>> add_integer(4, "School")
  Traceback (most recent call last):
  TypeError: b must be an integer

  >>> add_integer("School", 9)
  Traceback (most recent call last):
  TypeError: a must be an integer

